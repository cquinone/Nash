use: http://inventwithpython.com/pygame/chapter9.html
			pygame.draw.polygon(screen, BLACK,[[entity.points[0][0],entity.points[0][1]],[entity.points[1][0],entity.points[1][1]],[entity.points[2][0],entity.points[2][1]],[entity.points[3][0],entity.points[3][1]]], 2)


				if self.yvel != 0 and self.jump:
					screen.blit(self.jump_pic_left,self.pos)
					pygame.draw.polygon(screen, BLACK,[[self.jump_points[0][0],self.jump_points[0][1]],[self.jump_points[1][0],self.jump_points[1][1]],[self.jump_points[2][0],self.jump_points[2][1]],[self.jump_points[3][0],self.jump_points[3][1]]], 2)
				else:
					screen.blit(self.pic_left_idle,self.pos)
					pygame.draw.polygon(screen, BLACK,[[self.idle_points[0][0],self.idle_points[0][1]],[self.idle_points[1][0],self.idle_points[1][1]],[self.idle_points[2][0],self.idle_points[2][1]],[self.idle_points[3][0],self.idle_points[3][1]]], 2)
			if self.old_dir == "right":
				if self.yvel != 0 and self.jump:
					screen.blit(self.jump_pic_right,self.pos)
					pygame.draw.polygon(screen, BLACK,[[self.jump_points[0][0],self.jump_points[0][1]],[self.jump_points[1][0],self.jump_points[1][1]],[self.jump_points[2][0],self.jump_points[2][1]],[self.jump_points[3][0],self.jump_points[3][1]]], 2)
				else:
					screen.blit(self.pic_right_idle,self.pos)
					pygame.draw.polygon(screen, BLACK,[[self.idle_points[0][0],self.idle_points[0][1]],[self.idle_points[1][0],self.idle_points[1][1]],[self.idle_points[2][0],self.idle_points[2][1]],[self.idle_points[3][0],self.idle_points[3][1]]], 2)


doyle: 314 x 235  --> 52 x 39
sub: 195 x 120  --> 39 x 24
cursor: 1516 x 2400  -->  20 x 31
menu bar: 556 x 27 --> 800 x 38
laptop: 338 x 242  --> 50 x 36

- load nash vs pic for third level? or for background on loss? --> makes more sense as background

- include actual nash pic somewhere?

- judge (final boss?, if you lose?, ...)
  ---> gavel?
  ---> throws spining gavel at you (rotte image in update method)

- troy flying horse as first level exit

- second level a door (into classroom?)

- jerry springer  ---> 408 x 625  (51 x 53) "springer watched, -5"?
				  ---> circular movement from 0->2pi theta, x=cos, y=sin

- subway ? --> logo or sub + logo, hit == worse

- scooby-doo / meddling kids thing

- "RPI wifi connection established" (upon kitting laptop in third level)

- extra credit?

- use two entities -> folder + image file, include in lvl draw part (pos: based on entity)
--> create new entity on click on one of them, so that's drawn too
--> on clicking bottom or top half, delete and execute option
--> options: move to trash (then base entity also deleted), open
--> open: for image: in collision check, if clicked, show and then clear (back to draw main)
---------> for folder: show mad folders like "for nash eyes only", "" -> these aren't clickable
--> draw func: folder, image, cursor, bottom bar, trash can, timer!
-------> OR: throw special stuff in events func, like cursor, menu pop-up functions
--> more messages on hitting laptop
----> NEED: More on final screen that is latop interface: start menu, DMS logo + school issued, trash can, ....


laptop pic, menu pic


jan 29
----------------------
set new dirs for air movement, so like if jump or maybe non-0 yvel
-> then use same images but slower side speed (more realistic)
99,4,4 -> rgb brown
255,224,189 -> rgb white skin

keep side move on jump without hold?
maybe make not lower x speed in air, but x speed that decays somehow...

jan 30
---------------------
masking sizes:
from 5 to 19 for idle side x range
from 0 to 34 for idle side y range
from 4 to 18 for walk side x range
from 0 to 34 for walk side y range

somehow adjust key capture to check which was pressed most recently, then override with that one
or maybe like if you get to right and left is still pressed (no unpress?) then override?

jan 31
---------------------
need buffer on masks? that way can't "fall" into it
^right now, getting stuck when trying to jump out of block
or change falling to make sure you never have y coords that dip into block (somehow do now)

Might be that need masks and check for jump/fall state
--> implement those too and check


feb 1
---------------------
maybe shift block or nash mask inward to stop weird side collisions
--> moving blocks need way to deal with player interactions, will need to also update moving block masks
--> so like add moving bool to block class

prevent jumping out of fall? maaaybe-> makes falling worse
--> maybe not, nice way to save self
add timer drawn on lvl1 and beyond --> part of initialized parent class
--> just add to draw method?
Add the nash vs pic somehow --> maybe end screen if you lose?


feb 2
---------------------
game runs oddly --> trying to make it 60 fps and you get like 44
--> how to track one second passing?
one prized possession per level -> bonuses? time bonuses?
--> possible prized possessions: ___

feb 4
---------------------
smoke puff, ladder, FBI, ... -> objects to collide with
collide func handles blocks + walls
sep func for above?
or put object cover loop in update pos?
go with SEP FUNC

feb 28
---------------------
handle pause issue that drains clock
add another FBI agent
redo background art after level finished

march 5
---------------------
have each lvl point to next, and on finish, send nash coords of next lvl start
actually don't need, pass level end state, if ever over, move nash to start position of next level start
^next level == next level in list of levels

march 6
---------------------
make nash +time item a banjo


may 15
---------------------
make exit point for end of level visible
change to ijkl for movement


may 20th
--------------------
after collision, at some point throwing nash over to side of level (near finish, or end?)
check logic for nash repositioning, resetting, etc. also print nash pos at all times and track
